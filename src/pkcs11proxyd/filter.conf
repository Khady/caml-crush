debug = 1
modules = [("softhsm", "/usr/lib/softhsm/libsofthsm.so"), ("opencryptoki", "/usr/local/lib/opencryptoki/libopencryptoki.so")]
log_subchannel = filter
log_subchannel = ad
forbidden_mechanisms = [("sof.*", [CKM_SHA384_RSA_PKCS]), ("opencrypto.*", [])]
allowed_labels  = [("\\(sofths.*\\|opencryptoki\\)", ["TestR\\(O\\|O2\\)", "LABEL_RMB"]), ("opencryptoki", ["mytest.*", "unwrapped_rsa_pkey", ".*"])]
(*allowed_ids  = [("softhsm", [".*"])]*)
(*
forbidden_functions  = [("soft.*", []), ("softhsm", [])]
enforce_ro_sessions  = [(".*", no)]
forbid_admin_operations = [(".*", yes)] *)
(* remove_padding_oracles = [(".*", [wrap, unwrap, encrypt])] *)
(* filter_actions = [
                  (".*", [(C_Login, c_Login_hook), (C_Initialize, c_Initialize_hook)]), 
                  ("soft.*", [(C_CloseSession, identity)])
                 ]
*)

(**** Fixing PKCS#11 with patchset 1 *)
filter_actions_post = [ (".*", 
                          [
                           (******** This is optional: key usage segregation ******************************)
                           (* (C_Initialize, do_segregate_usage), *)

                           (******** Check for key creation and attribute manipulation on non local keys **)
                           (C_CreateObject, non_local_objects_patch),
                           (C_CopyObject, non_local_objects_patch),
                           (C_SetAttributeValue, non_local_objects_patch),

                           (******** Check for value extraction on sensitive/nonextractable keys **********)
                           (C_GetAttributeValue, prevent_sensitive_leak_patch),
                           (C_SetAttributeValue, prevent_sensitive_leak_patch),

                           (******** CryptokiX conflicting attributes patch addendum for existing objects *) 
                           (C_EncryptInit, conflicting_attributes_patch_on_existing_objects),
                           (C_DecryptInit, conflicting_attributes_patch_on_existing_objects),
                           (C_SignInit, conflicting_attributes_patch_on_existing_objects),
                           (C_SignRecoverInit, conflicting_attributes_patch_on_existing_objects),
                           (C_VerifyInit, conflicting_attributes_patch_on_existing_objects),
                           (C_VerifyRecoverInit, conflicting_attributes_patch_on_existing_objects),
                           (C_DeriveKey, conflicting_attributes_patch_on_existing_objects),
                           (C_DigestKey, conflicting_attributes_patch_on_existing_objects),
                           (C_WrapKey, conflicting_attributes_patch_on_existing_objects),
                           (C_UnwrapKey, conflicting_attributes_patch_on_existing_objects),
                           (C_FindObjects, conflicting_attributes_patch_on_existing_objects),
                             
                           (******** CryptokiX conflicting attributes patch *******************************)
                           (C_CreateObject, conflicting_attributes_patch), (C_CopyObject, conflicting_attributes_patch), 
                           (C_UnwrapKey, conflicting_attributes_patch), (C_GenerateKey, conflicting_attributes_patch), 
                           (C_GenerateKeyPair, conflicting_attributes_patch), (C_DeriveKey, conflicting_attributes_patch), 
                           (C_SetAttributeValue, conflicting_attributes_patch),

                           (******** CryptokiX sticky attributes patch ************************************)
                           (C_CopyObject, sticky_attributes_patch), 
                           (C_SetAttributeValue, sticky_attributes_patch),

                           (******** CryptokiX Wrapping format patch **************************************)
                           (C_WrapKey, wrapping_format_patch), 
                           (C_UnwrapKey, wrapping_format_patch),

                           (******** Sanitizing the creation attributes patch *****************************)
                           (C_CreateObject, sanitize_creation_templates_patch), (C_CopyObject, sanitize_creation_templates_patch), 
                           (C_GenerateKey, sanitize_creation_templates_patch), (C_GenerateKeyPair, sanitize_creation_templates_patch), 
                           (C_DeriveKey, sanitize_creation_templates_patch), (C_UnwrapKey, sanitize_creation_templates_patch) 
                          ]
                   )
                 ]

(**** Fixing PKCS#11 with patchset 2 *)
(*
filter_actions_post = [ (".*", 
                          [
                           (******** This is optional: key usage segregation ******************************)
                           (* (C_Initialize, do_segregate_usage), *)

                           (******** CryptokiX conflicting attributes patch addendum for existing objects *) 
                           (C_EncryptInit, conflicting_attributes_patch_on_existing_objects),
                           (C_DecryptInit, conflicting_attributes_patch_on_existing_objects),
                           (C_SignInit, conflicting_attributes_patch_on_existing_objects),
                           (C_SignRecoverInit, conflicting_attributes_patch_on_existing_objects),
                           (C_VerifyInit, conflicting_attributes_patch_on_existing_objects),
                           (C_VerifyRecoverInit, conflicting_attributes_patch_on_existing_objects),
                           (C_DeriveKey, conflicting_attributes_patch_on_existing_objects),
                           (C_DigestKey, conflicting_attributes_patch_on_existing_objects),
                           (C_WrapKey, conflicting_attributes_patch_on_existing_objects),
                           (C_UnwrapKey, conflicting_attributes_patch_on_existing_objects),
                           (C_FindObjects, conflicting_attributes_patch_on_existing_objects),

                           (******** CryptokiX secure templates patch on key creation and import **********)
                           (C_SetAttributeValue, secure_templates_patch),
                           (C_GenerateKey, secure_templates_patch), (C_GenerateKeyPair, secure_templates_patch),
                           (C_CreateObject, secure_templates_patch), (C_CopyObject, secure_templates_patch),
                           (C_UnwrapKey, secure_templates_patch), (C_DeriveKey, secure_templates_patch),

                           (******** Check for value extraction on sensitive/nonextractable keys **********)
                           (C_GetAttributeValue, prevent_sensitive_leak_patch),
                           (C_SetAttributeValue, prevent_sensitive_leak_patch),

                           (******** Sanitizing the creation attributes patch *****************************)
                           (C_CreateObject, sanitize_creation_templates_patch), (C_CopyObject, sanitize_creation_templates_patch), 
                           (C_GenerateKey, sanitize_creation_templates_patch), (C_GenerateKeyPair, sanitize_creation_templates_patch), 
                           (C_DeriveKey, sanitize_creation_templates_patch), (C_UnwrapKey, sanitize_creation_templates_patch) 
                          ]
                   )
                 ]
*)
