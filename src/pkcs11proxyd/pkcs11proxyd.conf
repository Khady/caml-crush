netplex {
  controller {
    max_level = "debug";    (* Log level *)

    (* configure "admin" socket directory, default "/tmp/.netplex" *)
    (*
    socket_directory = "/home/pkcs11proxyd/.netplex";
    *)

    logging {
      (* type can either be "stderr" or "syslog" *)
      type = "stderr";      (* Log to stderr *)
    };
  };
  service {
    name = "PKCS#11 Filtering Proxy";
    (* These parameters can be used to change UID/GID of worker processes *)
    (*
    user = "pkcs11proxyd";
    group = "pkcs11proxyd";
    *)

    (* Do NOT change conn_limit, this would be a serious SECURITY ISSUE *)
    conn_limit = 1;

    protocol {
      (* This section creates the socket *)
      name = "rpc_pkcs11";

      (* Socket can either be TCP or UNIX *)
      address {
        (* Default here is TCP localhost on port 4444 *)
        type = "internet";
        bind = "127.0.0.1:4444";

        (* For Unix
           WARNING: Since it is not (yet) possible to set the socket permission,
                    you will have to manually fix it to allow multi-user
                    access (e.g. chmod 777 <socket>).
        *)
        (*
        type = "local";
        path = "/var/run/pkcs11proxyd.socket";
        *)
      };
    };
    processor {
      (* This section specifies how to process data of the socket *)
      type = "rpc_pkcs11";

      (* libnames param is used when the proxy is compiled WITHOUT filtering support *)
      (* syntax is: libnames="<module_name>:<path_to_middleware>;<...>:<...>;"; *)
      (*
      libnames="softhsm:/usr/local/lib/softhsm/libsofthsm.so;opencryptoki:/usr/lib/libopencryptoki.so;";
      *)

      (* filter_config is used to supply the filtering configuration when compiled in *)
      filter_config="/usr/local/etc/pkcs11proxyd/filter.conf";

      (* SSL support is activated at compile-time, otherwise, the SSL parameters are ignored *)
      use_ssl = false;
      (* OpenSSL cipher syntax, one or many suites can be configured, or alias such as HIGH *)
      cipher_suite="DHE-RSA-AES128-SHA";
      (* Provide full certificate chain in cafile *)
      cafile = "/usr/local/etc/tests/certs/ca.crt";
      certfile = "/usr/local/etc/tests/certs/server.crt";
      certkey = "/usr/local/etc/tests/certs/server.key";
      (* Optional, allows to use DHE cipher suites, generate custom DH paramerters *)
      dh_params = "/usr/local/etc/tests/certs/dhparams.pem";
      (* Optional, allows to use ECDHE cipher suites *)
      ec_curve_name = "prime256v1";
      (* Optional, allows to use a custom certificate verification depth *)
      verify_depth = 4;

    };
    workload_manager {
      type = "dynamic";
      max_jobs_per_thread = 1;  (* Everything else is senseless *)
      min_free_jobs_capacity = 1;
      max_free_jobs_capacity = 1;
      max_threads = 100;
    };
  }
}
